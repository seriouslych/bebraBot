import telebot
from telebot import types
import os
import asyncio
import requests
from yt import download_vid
from yt import download_audio
from stk import stk_convert  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π

print("[bebraBot] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

token = 'TOKEN'  # –ó–¥–µ—Å—å —Å–ª–µ–¥—É–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

try:
    bot = telebot.TeleBot(token)
    print("[bebraBot] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
except Exception as e:
    print(f"[–û–®–ò–ë–ö–ê] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ: {e}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
waiting_for_image = {}


@bot.message_handler(commands=['start', 'help'])
def start(message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.reply_to(message,
                 """
                 –ë–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å –≤—Å—è–∫–∏–µ –≤–µ—â–∏.\n\n<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
    /start –∏ /help - –ø–æ–º–æ—â—å
    /bebra - –±–µ–±—Ä–∏—Ç—å
    /vid [—Å—Å—ã–ª–∫–∞] - —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å —é—Ç—É–±–∞
    /aud [—Å—Å—ã–ª–∫–∞] - —Å–∫–∞—á–∏–≤–∞—Ç—å –∞—É–¥–∏–æ —Å —é—Ç—É–±–∞
    /stk - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞
                 """,
                 parse_mode='html')
    print(f"[@{message.from_user.username}] –ö–æ–º–∞–Ω–¥–∞ start/help:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–º–æ—â—å.")
    print("[bebraBot] –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")


@bot.message_handler(commands=['bebra'], content_types=['text'])
def run_bebra(message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bebra –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é "bebra"
    asyncio.run(bebra(message))


async def bebra(message):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "bebra"
    photo = open('ph/1.jpg', 'rb')
    print(f"[@{message.from_user.username}] –ö–æ–º–∞–Ω–¥–∞ bebra:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–±—Ä–∞.")
    bot.send_photo(message.chat.id, photo, caption='bebra')
    photo.close()
    print("[bebraBot] –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")


@bot.message_handler(commands=['t'])
def t(message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /t –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ "test"
    bot.reply_to(message, "test")


@bot.message_handler(commands=['vid'])
def run_vid(message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /vid –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Å YouTube
    asyncio.run(vid(message))


async def vid(message):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ —Å YouTube
    if len(message.text.split()) > 1:
        url = f'{message.text.split(maxsplit=1)[1]}'
        bot.reply_to(message, f"‚è© –û—Ç–ø—Ä–∞–≤–∫–∞ {url}...", disable_web_page_preview=True)
        filename = await download_vid(url)
        if filename:
            print(f"[@{message.from_user.username}] –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!")
            with open(filename, 'rb') as video_file:
                bot.send_video(message.chat.id, video_file)
            bot.send_message(message.chat.id, "‚úÖ –ì–æ—Ç–æ–≤–æ!")
            print("[bebraBot] –û—á–∏—Å—Ç–∫–∞...")
            os.remove(filename)
            print("[bebraBot] –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ :(")

@bot.message_handler(commands=['aud'])
def run_audio(message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /aud –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ —Å YouTube
    asyncio.run(audio(message))


async def audio(message):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ —Å YouTube
    if len(message.text.split()) > 1:
        url = f'{message.text.split(maxsplit=1)[1]}'
        bot.reply_to(message, f"‚è© –û—Ç–ø—Ä–∞–≤–∫–∞ {url}...", disable_web_page_preview=True)
        filename = await download_audio(url)
        if filename:
            print(f"[@{message.from_user.username}] –ê—É–¥–∏–æ —Å–∫–∞—á–∞–Ω–æ!")
            with open(filename, 'rb') as audio_file:
                bot.send_audio(message.chat.id, audio_file)
            bot.send_message(message.chat.id, "‚úÖ –ì–æ—Ç–æ–≤–æ!")
            print("[bebraBot] –û—á–∏—Å—Ç–∫–∞...")
            os.remove(filename)
            print("[bebraBot] –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ :(")


@bot.message_handler(commands=['stk'], content_types=['text'])
def stk(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_image[message.chat.id] = True

    cancel_inline = types.InlineKeyboardMarkup()
    item_cancel = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    cancel_inline.add(item_cancel)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stk –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–≥–æ –∫–∞–∫ —Å—Ç–∏–∫–µ—Ä–∞
    bot.reply_to(message, "üèû –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—ë –∫–∞–∫ —Å—Ç–∏–∫–µ—Ä",
                 reply_markup=cancel_inline
                 )
    print(f"[@{message.from_user.username}] –ö–æ–º–∞–Ω–¥–∞ stk:\n–û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")


@bot.callback_query_handler(func=lambda call: True)
def stk_cancel(call):
    chat_id = call.message.chat.id  # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

    if call.data == 'cancel':
        try:
            # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç
            bot.delete_message(chat_id, call.message.message_id)
            waiting_for_image[chat_id] = False
            print(f"[bebraBot] stk –æ—Ç–º–µ–Ω—ë–Ω")
        except Exception as e:
            print("[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)


@bot.message_handler(content_types=['photo', 'text'])
def giving_photo(message):
    if message.reply_to_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        replied_message = message.reply_to_message
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stk
        if replied_message.text and message.chat.id in waiting_for_image and waiting_for_image[message.chat.id]:
            if message.photo:  # Check if there's a photo in the message
                stk_id = message.photo[-1].file_id
                stk_info = bot.get_file(stk_id)
                stk_path = stk_info.file_path
                file_url = f"https://api.telegram.org/file/bot{token}/{stk_path}"

                file_name = f"{message.chat.id}.jpg"
                input_path = os.path.join('stk', file_name)  # –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É

                if not os.path.exists('stk'):
                    os.makedirs('stk')

                print(f"[@{message.from_user.username}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                response = requests.get(file_url)
                with open(input_path, 'wb') as f:
                    f.write(response.content)

                output_path = os.path.splitext(input_path)[0] + ".png"  # –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É

                stk_convert(input_path, output_path)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

                last_message_id = bot.reply_to(message, "‚è© –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...").message_id
                print(f"[@{message.from_user.username}] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å—Ç–∏–∫–µ—Ä...")

                stk_send(message, input_path, output_path)

                if last_message_id:
                    bot.delete_message(message.chat.id, last_message_id)

                waiting_for_image[message.chat.id] = False
            else:
                bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç, –±–∞–ª–±–µ—Å >:(")


def stk_send(message, input_path, output_path):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        with open(output_path, 'rb') as doc:
            bot.send_document(message.chat.id, doc)

        print("[bebraBot] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        bot.reply_to(message, "‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print("[bebraBot] –û—á–∏—Å—Ç–∫–∞...")
        os.remove(input_path)
        os.remove(output_path)
        print("[bebraBot] –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")


bot.infinity_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
